//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MOSSWORKLOG.DATA
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MossWorkLogDbEntities : DbContext
    {
        public MossWorkLogDbEntities()
            : base("name=MossWorkLogDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblClient> tblClients { get; set; }
        public virtual DbSet<tblProject> tblProjects { get; set; }
        public virtual DbSet<tblRole> tblRoles { get; set; }
        public virtual DbSet<tblUser> tblUsers { get; set; }
        public virtual DbSet<tblWorkLog> tblWorkLogs { get; set; }
        public virtual DbSet<tblTask> tblTasks { get; set; }
        public virtual DbSet<tblTaskTick> tblTaskTicks { get; set; }
        public virtual DbSet<tblUserRoleAssign> tblUserRoleAssigns { get; set; }
        public virtual DbSet<PasswordResetRequest> PasswordResetRequests { get; set; }
        public virtual DbSet<tblMenu> tblMenus { get; set; }
        public virtual DbSet<tblUserLog> tblUserLogs { get; set; }
        public virtual DbSet<tblCategory> tblCategories { get; set; }
        public virtual DbSet<tblDocument> tblDocuments { get; set; }
    
        public virtual ObjectResult<tblUser> spCheckUserName(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblUser>("spCheckUserName", userNameParameter);
        }
    
        public virtual ObjectResult<tblUser> spCheckUserName(string userName, MergeOption mergeOption)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblUser>("spCheckUserName", mergeOption, userNameParameter);
        }
    
        public virtual int spClientAdd(string shortName, string clientName, ObjectParameter returnValue)
        {
            var shortNameParameter = shortName != null ?
                new ObjectParameter("ShortName", shortName) :
                new ObjectParameter("ShortName", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spClientAdd", shortNameParameter, clientNameParameter, returnValue);
        }
    
        public virtual int spClientUpdate(Nullable<int> clientId, string shortName, string clientName, ObjectParameter returnValue)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var shortNameParameter = shortName != null ?
                new ObjectParameter("ShortName", shortName) :
                new ObjectParameter("ShortName", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spClientUpdate", clientIdParameter, shortNameParameter, clientNameParameter, returnValue);
        }
    
        public virtual ObjectResult<spGetClientList_Result> spGetClientList(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetClientList_Result>("spGetClientList", clientIdParameter);
        }
    
        public virtual ObjectResult<spGetProjectList_Result> spGetProjectList(Nullable<int> projectId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjectList_Result>("spGetProjectList", projectIdParameter);
        }
    
        public virtual ObjectResult<spGetRoleList_Result> spGetRoleList(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRoleList_Result>("spGetRoleList", roleIdParameter);
        }
    
        public virtual ObjectResult<spGetTaskList_Result> spGetTaskList(Nullable<int> taskId)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetTaskList_Result>("spGetTaskList", taskIdParameter);
        }
    
        public virtual ObjectResult<spGetUserList_Result> spGetUserList(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserList_Result>("spGetUserList", userIdParameter);
        }
    
        public virtual ObjectResult<spGetWorkLogList_Result> spGetWorkLogList(Nullable<int> workLogId)
        {
            var workLogIdParameter = workLogId.HasValue ?
                new ObjectParameter("WorkLogId", workLogId) :
                new ObjectParameter("WorkLogId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetWorkLogList_Result>("spGetWorkLogList", workLogIdParameter);
        }
    
        public virtual int spProjectAdd(Nullable<int> clientId, string projectName, string description, ObjectParameter returnValue)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProjectAdd", clientIdParameter, projectNameParameter, descriptionParameter, returnValue);
        }
    
        public virtual int spProjectUpdate(Nullable<int> projectId, Nullable<int> clientId, string projectName, string description, ObjectParameter returnValue)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProjectUpdate", projectIdParameter, clientIdParameter, projectNameParameter, descriptionParameter, returnValue);
        }
    
        public virtual int spTaskAdd(Nullable<int> projectId, string taskName, string taskDescription, Nullable<int> createdBy, ObjectParameter returnValue)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var taskDescriptionParameter = taskDescription != null ?
                new ObjectParameter("TaskDescription", taskDescription) :
                new ObjectParameter("TaskDescription", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTaskAdd", projectIdParameter, taskNameParameter, taskDescriptionParameter, createdByParameter, returnValue);
        }
    
        public virtual int spTaskUpdate(Nullable<int> taskId, Nullable<int> projectId, string taskName, string taskDescription, Nullable<int> updatedBy, ObjectParameter returnValue)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(int));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var taskDescriptionParameter = taskDescription != null ?
                new ObjectParameter("TaskDescription", taskDescription) :
                new ObjectParameter("TaskDescription", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTaskUpdate", taskIdParameter, projectIdParameter, taskNameParameter, taskDescriptionParameter, updatedByParameter, returnValue);
        }
    
        public virtual int spUserAdd(string userName, string fullName, string mobile, string email, string password, Nullable<int> roleId, ObjectParameter returnValue)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUserAdd", userNameParameter, fullNameParameter, mobileParameter, emailParameter, passwordParameter, roleIdParameter, returnValue);
        }
    
        public virtual int spUserUpdate(Nullable<int> userId, string userName, string fullName, string mobile, string email, string password, Nullable<int> roleId, ObjectParameter returnValue)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUserUpdate", userIdParameter, userNameParameter, fullNameParameter, mobileParameter, emailParameter, passwordParameter, roleIdParameter, returnValue);
        }
    
        public virtual ObjectResult<spValidateLogin_Result> spValidateLogin(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spValidateLogin_Result>("spValidateLogin", userNameParameter, passwordParameter);
        }
    
        public virtual int spWorkLogAdd(Nullable<int> taskId, Nullable<int> createdById, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<decimal> duration, Nullable<int> unit, Nullable<decimal> averageTime, ObjectParameter returnValue)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(int));
    
            var createdByIdParameter = createdById.HasValue ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(decimal));
    
            var unitParameter = unit.HasValue ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(int));
    
            var averageTimeParameter = averageTime.HasValue ?
                new ObjectParameter("AverageTime", averageTime) :
                new ObjectParameter("AverageTime", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spWorkLogAdd", taskIdParameter, createdByIdParameter, startTimeParameter, endTimeParameter, durationParameter, unitParameter, averageTimeParameter, returnValue);
        }
    
        public virtual int spWorkLogUpdate(Nullable<int> workLogId, Nullable<int> taskId, Nullable<int> createdById, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<decimal> duration, Nullable<int> unit, Nullable<decimal> averageTime, ObjectParameter returnValue)
        {
            var workLogIdParameter = workLogId.HasValue ?
                new ObjectParameter("WorkLogId", workLogId) :
                new ObjectParameter("WorkLogId", typeof(int));
    
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(int));
    
            var createdByIdParameter = createdById.HasValue ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(decimal));
    
            var unitParameter = unit.HasValue ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(int));
    
            var averageTimeParameter = averageTime.HasValue ?
                new ObjectParameter("AverageTime", averageTime) :
                new ObjectParameter("AverageTime", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spWorkLogUpdate", workLogIdParameter, taskIdParameter, createdByIdParameter, startTimeParameter, endTimeParameter, durationParameter, unitParameter, averageTimeParameter, returnValue);
        }
    }
}
